"use strict";!function(){function e(e){var t=r(e.data);switch(t.method){case"i2c.open":navigator.mozI2c.open(t.portNumber);break;case"i2c.setDeviceAddress":try{var a=navigator.mozI2c.setDeviceAddress(t.portNumber,t.slaveAddress)}catch(o){postMessage(s({method:t.method+"."+t.portNumber,portNumber:t.portNumber,error:{name:o.name,message:o.message}}));break}postMessage(s({method:t.method+"."+t.portNumber,portNumber:t.portNumber,slaveDevice:a}));break;case"i2c.write":try{var m=navigator.mozI2c.write(t.portNumber,t.slaveAddress,t.registerNumber,t.value,t.aIsOctet)}catch(o){postMessage(s({method:t.method+"."+t.xid+"."+t.portNumber+"."+t.slaveAddress+"."+t.registerNumber,portNumber:t.portNumber,error:{name:o.name,message:o.message}}));break}postMessage(s({method:t.method+"."+t.xid+"."+t.portNumber+"."+t.slaveAddress+"."+t.registerNumber,portNumber:t.portNumber,value:m}));break;case"i2c.read":try{var m=navigator.mozI2c.read(t.portNumber,t.slaveAddress,t.readRegistar,t.aIsOctet)}catch(o){postMessage(s({method:t.method+"."+t.xid+"."+t.portNumber+"."+t.slaveAddress+"."+t.readRegistar,portNumber:t.portNumber,error:{name:o.name,message:o.message}}));break}postMessage(s({method:t.method+"."+t.xid+"."+t.portNumber+"."+t.slaveAddress+"."+t.readRegistar,portNumber:t.portNumber,value:m}));break;default:throw"Unexpected case to worker method"}}navigator.mozI2c||(navigator.mozI2c=new Object,navigator.mozI2c.open=function(){},navigator.mozI2c.setDeviceAddress=function(e,r){if(console.log("mozI2c.setDeviceAddress portNumber:"+e+", slaveAddress:"+r),0!==e&&2!==e){var s={message:"portNumber error"};throw s}if(r>127||r<0){var s={message:"slaveAddress error"};throw s}var t={slaveAddress:r};return t},navigator.mozI2c.write=function(e,r,s,t,a){if(console.log("mozI2c.write portNumber:"+e+", slaveAddress:"+r+", registerNumber:"+s+", value:"+t+", aIsOctet:"+a),0!==e&&2!==e){var o={message:"portNumber error"};throw o}if(r>127||r<0){var o={message:"slaveAddress error"};throw o}return 0},navigator.mozI2c.read=function(e,r,s,t){if(console.log("mozI2c.read portNumber:"+e+", slaveAddress:"+r+", readRegistar:"+s+", aIsOctet:"+t),0!==e&&2!==e){var a={message:"portNumber error"};throw a}if(r>127||r<0){var a={message:"slaveAddress error"};throw a}return 1}),onmessage=e;var r=function(e){return JSON.parse(String.fromCharCode.apply(null,new Uint16Array(e)))},s=function(e){for(var r=JSON.stringify(e),s=new ArrayBuffer(2*r.length),t=new Uint16Array(s),a=0,o=r.length;a<o;a++)t[a]=r.charCodeAt(a);return t}}();